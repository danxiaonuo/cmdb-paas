[supervisord]
nodaemon = true ;是否在前台启动，默认是false，即以 daemon 的方式启动
[program:appengine]
command=/usr/local/bin/gunicorn wsgi --bind 0.0.0.0:8000 -k gevent -w 4 -n appengine --access-logfile - --error-logfile -
directory=/data/paas/appengine
environment=PYTHONPATH=/data/paas/appengine,BK_ENV="production",PAAS_LOGGING_DIR="/data/paas/logs/"
stdout_logfile=/data/paas/logs/appengine_gunicorn.log
numprocs = 1  ;启动几个进程
stopsignal = KILL ;杀进程的信号INT QUIT等等
autostart = true ;是否自动启动
autorestart = true ;是否自动重启
killasgroup = true ;向进程组发送kill信号,包括子进程
stopasgroup = true ;使用supervisorctl停止时,子进程也会一起停止
startsecs = 5 ;进程持续运行多久才认为是启动成功
startretries = 10000 ;重启失败的连续重试次数
exitcodes = 0,2  ;进程退出码,autorestart=unexpected时有用
redirect_stderr = true ;把 stderr 重定向到 stdout

[supervisord]
nodaemon = true ;是否在前台启动，默认是false，即以 daemon 的方式启动
[program:paas]
command=/usr/local/bin/gunicorn wsgi --bind 0.0.0.0:8001 -k gevent -w 4 -n paas --access-logfile - --error-logfile -
directory=/data/paas/paas
environment=DJANGO_SETTINGS_MODULE=settings,PYTHONPATH=/data/paas/paas,BK_ENV="production",PAAS_LOGGING_DIR="/data/paas/logs/"
stdout_logfile=/data/paas/logs/paas_gunicorn.log
numprocs = 1  ;启动几个进程
stopsignal = KILL ;杀进程的信号INT QUIT等等
autostart = true ;是否自动启动
autorestart = true ;是否自动重启
killasgroup = true ;向进程组发送kill信号,包括子进程
stopasgroup = true ;使用supervisorctl停止时,子进程也会一起停止
startsecs = 5 ;进程持续运行多久才认为是启动成功
startretries = 10000 ;重启失败的连续重试次数
exitcodes = 0,2  ;进程退出码,autorestart=unexpected时有用
redirect_stderr = true ;把 stderr 重定向到 stdout

[supervisord]
nodaemon = true ;是否在前台启动，默认是false，即以 daemon 的方式启动
[program:esb]
command=/usr/local/bin/gunicorn wsgi --bind 0.0.0.0:8002 -k gevent -w 4 -n esb --access-logfile - --error-logfile -
directory=/data/paas/esb
environment=PYTHONPATH=/data/paas/esb,BK_ENV="production",PAAS_LOGGING_DIR="/data/paas/logs/"
stdout_logfile=/data/paas/logs/esb_gunicorn.log
numprocs = 1  ;启动几个进程
stopsignal = KILL ;杀进程的信号INT QUIT等等
autostart = true ;是否自动启动
autorestart = true ;是否自动重启
killasgroup = true ;向进程组发送kill信号,包括子进程
stopasgroup = true ;使用supervisorctl停止时,子进程也会一起停止
startsecs = 5 ;进程持续运行多久才认为是启动成功
startretries = 10000 ;重启失败的连续重试次数
exitcodes = 0,2  ;进程退出码,autorestart=unexpected时有用
redirect_stderr = true ;把 stderr 重定向到 stdout

[supervisord]
nodaemon = true ;是否在前台启动，默认是false，即以 daemon 的方式启动
[program:login]
command=/usr/local/bin/gunicorn wsgi --bind 0.0.0.0:8003 -k gevent -w 4 -n login --access-logfile - --error-logfile -
directory=/data/paas/login
environment=DJANGO_SETTINGS_MODULE=settings,PYTHONPATH=/data/paas/login,BK_ENV="production",PAAS_LOGGING_DIR="/data/paas/logs/"
stdout_logfile=/data/paas/logs/login_gunicorn.log
numprocs = 1  ;启动几个进程
stopsignal = KILL ;杀进程的信号INT QUIT等等
autostart = true ;是否自动启动
autorestart = true ;是否自动重启
killasgroup = true ;向进程组发送kill信号,包括子进程
stopasgroup = true ;使用supervisorctl停止时,子进程也会一起停止
startsecs = 5 ;进程持续运行多久才认为是启动成功
startretries = 10000 ;重启失败的连续重试次数
exitcodes = 0,2  ;进程退出码,autorestart=unexpected时有用
redirect_stderr = true ;把 stderr 重定向到 stdout
